/* 
 * Trespasser Goes Drag[en]gine
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace TresGoesDE.Converting


pin Dragengine.Gui
pin Dragengine.XML


/**
 * Export skin.
 */
class ExportSkin
	private var GroffModel pModel
	private var GroffMaterial pMaterial
	
	
	public func new( GroffModel model )
		pModel = model
		pMaterial = model.getMapping().getMaterial()
	end
	
	
	public func void export( Exporter exporter, SwpFile swpFile )
		var EasyXML xmlSkin = EasyXML.new()
		
		var EasyXMLElement tagSkin = EasyXMLElement.new( EasyXMLElementType.tag )
		tagSkin.setTagName( "skin" )
		xmlSkin.setRootElement( tagSkin )
		
		var int i, materialCount = pMaterial.getMaterialCount()
		
		for i = 0 to materialCount
			writeTexture( exporter, swpFile, i, tagSkin )
		end
		
		var String filename = pModel.getName().getName() + ".deskin"
		xmlSkin.writeToFile( FileWriter.new( ( exporter.getPathSkinDir() + filename ).getPath() ), false )
	end
	
	
	private func void writeTexture( Exporter exporter, SwpFile swpFile, int index, EasyXMLElement tagSkin )
		var PidFileEntry pid = pMaterial.getPidAt( index )
		if pid == null or pid.getOcclusion()
			return 
		end
		
		// find images
		var GroffImage colorMap = pMaterial.getColorMapAt( index )
		if colorMap != null and colorMap.getName().getName().empty()
			colorMap = null
		end
		
		var GroffImage opacityMap = pMaterial.getOpacityMapAt( index )
		if opacityMap != null and opacityMap.getName().getName().empty()
			opacityMap = null
		end
		
		var GroffImage bumpMap = pMaterial.getBumpMapAt( index )
		if bumpMap != null and bumpMap.getName().getName().empty()
			bumpMap = null
		end
		
		// write texture tag
		var EasyXMLElement tagTexture = tagSkin.addTag( "texture" )
		tagTexture.setAttribute( "name", "mat" + ( index < 9 if "0" else "" ) + ( index + 1 ) )
		
		// write properties
		var EasyXMLElement tagProperty
		
		if colorMap == null 
			tagProperty = tagTexture.addTag( "color" )
			tagProperty.setAttribute( "property", "color" )
			tagProperty.setAttribute( "r", pid.getDefaultColor().getRed() )
			tagProperty.setAttribute( "g", pid.getDefaultColor().getGreen() )
			tagProperty.setAttribute( "b", pid.getDefaultColor().getBlue() )
			return
		end
		
		var PidFilePalette palette = pid.getPalette()
		if palette == null and pid.getBitCount() != PidFileEntry.BitDepth.rgb16
			throw EInvalidParam.new( "no palette without PidFileEntry.BitCount.rgb16 not possible" )
		end
		
		var int pixelCount = pid.getWidth() * pid.getHeight()
		var bool hasTransp = pid.getTransparency() != PidFileEntry.Transparency.none
		
		tagTexture.addComment( "pid.defaultColor: " + pid.getDefaultColor().getRed() \
			+ " " + pid.getDefaultColor().getGreen() + " " + pid.getDefaultColor().getBlue() )
		tagTexture.addComment( "pid.bitCount: " + pid.getBitCount() )
		tagTexture.addComment( "pid.transparency: " + pid.getTransparency() )
		tagTexture.addComment( "pid.type: " + pid.getType() )
		tagTexture.addComment( "pid.palette: " + ( pid.getPalette() != null if "yes" else "no" ) )
		
		// retrieve the pixel data from the data block in the swp
		var SwpFileImages images = swpFile.loadImage( pid )
		var EditableImage imageColor = images.getColor()
		var EditableImage imageOpacity = images.getOpacity()
		var EditableImage imageBumpMap = images.getBumpMap()
		var String filename
		var File path
		
		// write images
		if imageColor != null
			filename = colorMap.getName().getName().split( '\\' ).getAt( -1 ) cast String
			filename = filename.substring( 0, -4 ) + ".png"
			path = exporter.getPathSkinImageDir() + filename
			imageColor.getImage().saveToFile( path.getPath() )
			
			tagProperty = tagTexture.addDataTag( "image", "image/" + filename )
			tagProperty.setAttribute( "property", "color" )
			
		else
			tagProperty = tagTexture.addTag( "color" )
			tagProperty.setAttribute( "property", "color" )
			tagProperty.setAttribute( "r", pid.getDefaultColor().getRed() )
			tagProperty.setAttribute( "g", pid.getDefaultColor().getGreen() )
			tagProperty.setAttribute( "b", pid.getDefaultColor().getBlue() )
		end
		
		if opacityMap != null and imageOpacity != null
			filename = opacityMap.getName().getName().split( '\\' ).getAt( -1 ) cast String
			filename = filename.substring( 0, -4 ) + ".png"
			path = exporter.getPathSkinImageDir() + filename
			imageOpacity.getImage().saveToFile( path.getPath() )
			
			tagProperty = tagTexture.addDataTag( "image", "image/" + filename )
			tagProperty.setAttribute( "property", "solidity" )
			
			tagProperty = tagTexture.addDataTag( "value", 0 )
			tagProperty.setAttribute( "property", "solidity.masked" )
		end
		
		if bumpMap != null and imageBumpMap != null
			filename = bumpMap.getName().getName().split( '\\' ).getAt( -1 ) cast String
			filename = filename.substring( 0, -4 ) + ".png"
			path = exporter.getPathSkinImageDir() + filename
			imageBumpMap.getImage().saveToFile( path.getPath() )
			
			tagProperty = tagTexture.addDataTag( "image", "image/" + filename )
			tagProperty.setAttribute( "property", "normal" )
		end
	end
end
