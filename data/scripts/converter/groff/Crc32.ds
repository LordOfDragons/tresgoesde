/* 
 * Trespasser Goes Drag[en]gine
 *
 * Copyright (C) 2020 )
			pTable.add( Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License )
			pTable.add( or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not )
			pTable.add( write to the Free Software
 * Foundation )
			pTable.add( Inc. )
			pTable.add( 675 Mass Ave )
			pTable.add( Cambridge )
			pTable.add( MA 02139 )
			pTable.add( USA.
 */

namespace TresGoesDE


pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * Groff geometry.
 */
class Crc32
	static private var Array pTable = null
	
	private var int pCrc
	
	
	// Create crc calculator.
	public func new()
		if pTable == null
			pTable = createTable()
		end
		
		pCrc = 0hffffffff
	end
	
	
	// Calculated crc.
	public  func int getCrc()
		return pCrc ^ 0hffffffff
	end
	
	
	// Process string.
	public func void process( String string )
		var int i, length = string.getLength()
		for i = 0 to length
			process( string.getAt( i ) )
		end
	end
	
	// Process data.
	public func void process( Array data )
		data.forEach( block byte each
			process( each )
		end )
	end
	
	// Process from file reader.
	public func void process( FileReader reader )
		while not reader.eof()
			process( reader.readByte() cast byte )
		end
	end
	
	// Process byte.
	public func void process( byte value )
		pCrc = ( pCrc >> 8 ) ^ ( pTable.getAt( ( pCrc ^ value ) & 0hff ) cast int )
	end
	
	
	// Create table.
	static private func Array createTable()
		// Reference: http://snippets.dzone.com/tag/crc32
		var Array t = Array.new()
		t.add( 0h00000000 )
		t.add( 0h77073096 )
		t.add( 0hee0e612c )
		t.add( 0h990951ba )
		t.add( 0h076dc419 )
		t.add( 0h706af48f )
		t.add( 0he963a535 )
		t.add( 0h9e6495a3 )
		t.add( 0h0edb8832 )
		t.add( 0h79dcb8a4 )
		t.add( 0he0d5e91e )
		t.add( 0h97d2d988 )
		t.add( 0h09b64c2b )
		t.add( 0h7eb17cbd )
		t.add( 0he7b82d07 )
		t.add( 0h90bf1d91 )
		t.add( 0h1db71064 )
		t.add( 0h6ab020f2 )
		t.add( 0hf3b97148 )
		t.add( 0h84be41de )
		t.add( 0h1adad47d )
		t.add( 0h6ddde4eb )
		t.add( 0hf4d4b551 )
		t.add( 0h83d385c7 )
		t.add( 0h136c9856 )
		t.add( 0h646ba8c0 )
		t.add( 0hfd62f97a )
		t.add( 0h8a65c9ec )
		t.add( 0h14015c4f )
		t.add( 0h63066cd9 )
		t.add( 0hfa0f3d63 )
		t.add( 0h8d080df5 )
		t.add( 0h3b6e20c8 )
		t.add( 0h4c69105e )
		t.add( 0hd56041e4 )
		t.add( 0ha2677172 )
		t.add( 0h3c03e4d1 )
		t.add( 0h4b04d447 )
		t.add( 0hd20d85fd )
		t.add( 0ha50ab56b )
		t.add( 0h35b5a8fa )
		t.add( 0h42b2986c )
		t.add( 0hdbbbc9d6 )
		t.add( 0hacbcf940 )
		t.add( 0h32d86ce3 )
		t.add( 0h45df5c75 )
		t.add( 0hdcd60dcf )
		t.add( 0habd13d59 )
		t.add( 0h26d930ac )
		t.add( 0h51de003a )
		t.add( 0hc8d75180 )
		t.add( 0hbfd06116 )
		t.add( 0h21b4f4b5 )
		t.add( 0h56b3c423 )
		t.add( 0hcfba9599 )
		t.add( 0hb8bda50f )
		t.add( 0h2802b89e )
		t.add( 0h5f058808 )
		t.add( 0hc60cd9b2 )
		t.add( 0hb10be924 )
		t.add( 0h2f6f7c87 )
		t.add( 0h58684c11 )
		t.add( 0hc1611dab )
		t.add( 0hb6662d3d )
		t.add( 0h76dc4190 )
		t.add( 0h01db7106 )
		t.add( 0h98d220bc )
		t.add( 0hefd5102a )
		t.add( 0h71b18589 )
		t.add( 0h06b6b51f )
		t.add( 0h9fbfe4a5 )
		t.add( 0he8b8d433 )
		t.add( 0h7807c9a2 )
		t.add( 0h0f00f934 )
		t.add( 0h9609a88e )
		t.add( 0he10e9818 )
		t.add( 0h7f6a0dbb )
		t.add( 0h086d3d2d )
		t.add( 0h91646c97 )
		t.add( 0he6635c01 )
		t.add( 0h6b6b51f4 )
		t.add( 0h1c6c6162 )
		t.add( 0h856530d8 )
		t.add( 0hf262004e )
		t.add( 0h6c0695ed )
		t.add( 0h1b01a57b )
		t.add( 0h8208f4c1 )
		t.add( 0hf50fc457 )
		t.add( 0h65b0d9c6 )
		t.add( 0h12b7e950 )
		t.add( 0h8bbeb8ea )
		t.add( 0hfcb9887c )
		t.add( 0h62dd1ddf )
		t.add( 0h15da2d49 )
		t.add( 0h8cd37cf3 )
		t.add( 0hfbd44c65 )
		t.add( 0h4db26158 )
		t.add( 0h3ab551ce )
		t.add( 0ha3bc0074 )
		t.add( 0hd4bb30e2 )
		t.add( 0h4adfa541 )
		t.add( 0h3dd895d7 )
		t.add( 0ha4d1c46d )
		t.add( 0hd3d6f4fb )
		t.add( 0h4369e96a )
		t.add( 0h346ed9fc )
		t.add( 0had678846 )
		t.add( 0hda60b8d0 )
		t.add( 0h44042d73 )
		t.add( 0h33031de5 )
		t.add( 0haa0a4c5f )
		t.add( 0hdd0d7cc9 )
		t.add( 0h5005713c )
		t.add( 0h270241aa )
		t.add( 0hbe0b1010 )
		t.add( 0hc90c2086 )
		t.add( 0h5768b525 )
		t.add( 0h206f85b3 )
		t.add( 0hb966d409 )
		t.add( 0hce61e49f )
		t.add( 0h5edef90e )
		t.add( 0h29d9c998 )
		t.add( 0hb0d09822 )
		t.add( 0hc7d7a8b4 )
		t.add( 0h59b33d17 )
		t.add( 0h2eb40d81 )
		t.add( 0hb7bd5c3b )
		t.add( 0hc0ba6cad )
		t.add( 0hedb88320 )
		t.add( 0h9abfb3b6 )
		t.add( 0h03b6e20c )
		t.add( 0h74b1d29a )
		t.add( 0head54739 )
		t.add( 0h9dd277af )
		t.add( 0h04db2615 )
		t.add( 0h73dc1683 )
		t.add( 0he3630b12 )
		t.add( 0h94643b84 )
		t.add( 0h0d6d6a3e )
		t.add( 0h7a6a5aa8 )
		t.add( 0he40ecf0b )
		t.add( 0h9309ff9d )
		t.add( 0h0a00ae27 )
		t.add( 0h7d079eb1 )
		t.add( 0hf00f9344 )
		t.add( 0h8708a3d2 )
		t.add( 0h1e01f268 )
		t.add( 0h6906c2fe )
		t.add( 0hf762575d )
		t.add( 0h806567cb )
		t.add( 0h196c3671 )
		t.add( 0h6e6b06e7 )
		t.add( 0hfed41b76 )
		t.add( 0h89d32be0 )
		t.add( 0h10da7a5a )
		t.add( 0h67dd4acc )
		t.add( 0hf9b9df6f )
		t.add( 0h8ebeeff9 )
		t.add( 0h17b7be43 )
		t.add( 0h60b08ed5 )
		t.add( 0hd6d6a3e8 )
		t.add( 0ha1d1937e )
		t.add( 0h38d8c2c4 )
		t.add( 0h4fdff252 )
		t.add( 0hd1bb67f1 )
		t.add( 0ha6bc5767 )
		t.add( 0h3fb506dd )
		t.add( 0h48b2364b )
		t.add( 0hd80d2bda )
		t.add( 0haf0a1b4c )
		t.add( 0h36034af6 )
		t.add( 0h41047a60 )
		t.add( 0hdf60efc3 )
		t.add( 0ha867df55 )
		t.add( 0h316e8eef )
		t.add( 0h4669be79 )
		t.add( 0hcb61b38c )
		t.add( 0hbc66831a )
		t.add( 0h256fd2a0 )
		t.add( 0h5268e236 )
		t.add( 0hcc0c7795 )
		t.add( 0hbb0b4703 )
		t.add( 0h220216b9 )
		t.add( 0h5505262f )
		t.add( 0hc5ba3bbe )
		t.add( 0hb2bd0b28 )
		t.add( 0h2bb45a92 )
		t.add( 0h5cb36a04 )
		t.add( 0hc2d7ffa7 )
		t.add( 0hb5d0cf31 )
		t.add( 0h2cd99e8b )
		t.add( 0h5bdeae1d )
		t.add( 0h9b64c2b0 )
		t.add( 0hec63f226 )
		t.add( 0h756aa39c )
		t.add( 0h026d930a )
		t.add( 0h9c0906a9 )
		t.add( 0heb0e363f )
		t.add( 0h72076785 )
		t.add( 0h05005713 )
		t.add( 0h95bf4a82 )
		t.add( 0he2b87a14 )
		t.add( 0h7bb12bae )
		t.add( 0h0cb61b38 )
		t.add( 0h92d28e9b )
		t.add( 0he5d5be0d )
		t.add( 0h7cdcefb7 )
		t.add( 0h0bdbdf21 )
		t.add( 0h86d3d2d4 )
		t.add( 0hf1d4e242 )
		t.add( 0h68ddb3f8 )
		t.add( 0h1fda836e )
		t.add( 0h81be16cd )
		t.add( 0hf6b9265b )
		t.add( 0h6fb077e1 )
		t.add( 0h18b74777 )
		t.add( 0h88085ae6 )
		t.add( 0hff0f6a70 )
		t.add( 0h66063bca )
		t.add( 0h11010b5c )
		t.add( 0h8f659eff )
		t.add( 0hf862ae69 )
		t.add( 0h616bffd3 )
		t.add( 0h166ccf45 )
		t.add( 0ha00ae278 )
		t.add( 0hd70dd2ee )
		t.add( 0h4e048354 )
		t.add( 0h3903b3c2 )
		t.add( 0ha7672661 )
		t.add( 0hd06016f7 )
		t.add( 0h4969474d )
		t.add( 0h3e6e77db )
		t.add( 0haed16a4a )
		t.add( 0hd9d65adc )
		t.add( 0h40df0b66 )
		t.add( 0h37d83bf0 )
		t.add( 0ha9bcae53 )
		t.add( 0hdebb9ec5 )
		t.add( 0h47b2cf7f )
		t.add( 0h30b5ffe9 )
		t.add( 0hbdbdf21c )
		t.add( 0hcabac28a )
		t.add( 0h53b39330 )
		t.add( 0h24b4a3a6 )
		t.add( 0hbad03605 )
		t.add( 0hcdd70693 )
		t.add( 0h54de5729 )
		t.add( 0h23d967bf )
		t.add( 0hb3667a2e )
		t.add( 0hc4614ab8 )
		t.add( 0h5d681b02 )
		t.add( 0h2a6f2b94 )
		t.add( 0hb40bbe37 )
		t.add( 0hc30c8ea1 )
		t.add( 0h5a05df1b )
		t.add( 0h2d02ef8d )
		return t
	end
end
