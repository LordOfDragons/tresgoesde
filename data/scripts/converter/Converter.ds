/* 
 * Trespasser Goes Drag[en]gine
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace TresGoesDE

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Converter from Trespasser to Drag[en]gine.
 */
class Converter
	private var String pPathTrespasser
	private var String pPathDragengine
	
	
	public func new()
		pPathTrespasser = "/converter/trespasser"
		pPathDragengine = "/converter/dragengine"
		
		// ensure directory exist so the user finds them easily. this is done by writing
		// a readme file. the game engine ensures the directory where the file is located
		// in is created if required
		if not FileSystem.existsFile( "/converter/README.txt" )
			FileWriter.new( "/converter/README.txt" ).writeData( \
				FileReader.new( "/content/template/converterReadme" ) )
		end
	end
	
	
	
	// Overlay path to located trespasser data in
	public func String getPathTrespasser()
		return pPathTrespasser
	end
	
	// Overlay path to store dragengine data in
	public func String getPathDragengine()
		return pPathDragengine
	end
	
	
	// fill list model with file titles of converted scene.
	public func void fillModelConvertedScenes( DefaultListModel model )
		model.removeAll()
	end
	
	// fill list model with file titles of convertable scene.
	public func void fillModelConvertableScenes( DefaultListModel model )
		model.removeAll()
		
		FileSystem.searchFiles( pPathTrespasser, true, block String path, FileType type
			if type == FileType.file and FileSystem.pathMatchesPattern( File.new( path ).getName(), "*.scn" )
				model.add( path.substring( pPathTrespasser.getLength() + 1, -4 ) )
			end
			return true // continue(true) or stop(false)
		end )
		
		model.sort()
	end
end
