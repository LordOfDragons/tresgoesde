/* 
 * Trespasser Goes Drag[en]gine
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace TresGoesDE

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Converter utils
 */
class ConverterUtils
	public func new()
	end
	
	
	
	/**
	 * Open trespasser file for reading. Since trespasser originated on Windows the file names
	 * are case insensitive. When run on Unix systems where file names are case sensitive this
	 * results in problems since trespasser file names are often case inconsistent. This method
	 * tries to find a file matching the desired filename case insensitive.
	 */
	static public func FileReader readTresFile( String path )
		var File file = File.new( path )
		var int i, count = file.getComponentCount()
		var File found = File.new()
		
		for i = 0 to count
			found = locateFile( found, file.getComponentAt( i ) )
			if found == null
				throw EInvalidParam.new( "file not found '" + path + "'" )
			end
		end
		
		return FileReader.new( found.getPath() )
	end
	
	static private func File locateFile( File directory, String filename )
		var ObjectReference found = ObjectReference.new()
		var String target = ( directory + filename ).getPath()
		
		FileSystem.searchFiles( directory.getPath(), false, block String path, FileType type
			if path.compareNoCase( target ) == 0
				found.set( File.new( path ) )
				return false
			end
			return true
		end )
		
		return found.get() cast File
	end
end
