/* 
 * Trespasser Goes Drag[en]gine
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace TresGoesDE.Converting


pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * Terrain tree vertex.
 */
class TerrainTreeVertex
	private var Point pCoord
	private var int pRootLevel
	private var Array pScaling
	private var int pWavelet
	private var Array pNodes
	
	
	public func new( Point coord )
		pCoord = coord
		pRootLevel = 0
		pScaling = Array.newWith( 0 )
		pWavelet = 0
		pNodes = Array.new()
	end
	
	public func new( TerrainTreeVertex v1, TerrainTreeVertex v2 ) this( ( v1.pCoord + v2.pCoord ) / 2 )
		pRootLevel = DEMath.max( v1.pRootLevel, v2.pRootLevel ) + 1
		pScaling = Array.newWith( -tresUnlift( tresPredict( v1.getScaling( pRootLevel ) + v2.getScaling( pRootLevel ) ) ) )
		pWavelet = 0
		pNodes = Array.new()
	end
	
	
	public func Point getCoord()
		return pCoord
	end
	
	public func int getRootLevel()
		return pRootLevel
	end
	
	public func int getScaling()
		return -tresLift( pScaling.getAt( -1 ) cast int )
	end
	
	public func int getRawScaling()
		return pScaling.getAt( -1 ) cast int
	end
	
	public func int getScaling( int level )
		var int index = indexFromLevel( level )
		ensureScalingHasIndex( index )
		return -tresLift( pScaling.getAt( index ) cast int )
	end
	
	private func int indexFromLevel( int level )
		if level < pRootLevel
			throw EInvalidParam.new( "level(" + level + ") < root level(" + pRootLevel + ")" )
		end
		return level - pRootLevel
	end
	
	public func void setScaling( int level, int value )
		var int index = indexFromLevel( level )
		ensureScalingHasIndex( index )
		pScaling.setAt( index, -tresUnlift( value ) )
	end
	
	private func void ensureScalingHasIndex( int index )
		var int i
		for i = pScaling.getCount() - 1 to index
			pScaling.add( tresUnlift( tresLift( pScaling.getAt( i ) cast int ) ) ) // MakeLevel
		end
	end
	
	public func int getWavelet()
		return pWavelet
	end
	
	public func void setWavelet( int wavelet )
		pWavelet = wavelet
	end
	
	
	public func void copyScaling( int level, TerrainTreeVertex vertex )
		setScaling( level, vertex.getScaling( level ) )
	end
	
	public func void setRootLevelScaling( TerrainTreeVertex v1, TerrainTreeVertex v2 )
		var int predict = tresPredict( ( v1.getScaling( pRootLevel ) + v2.getScaling( pRootLevel ) ) )
		var int old = pScaling.getAt( 0 ) cast int
		var int new = -tresUnlift( predict + pWavelet )
		
		pScaling.setAt( 0, new )
		
		var int diff = new - old
		if diff != 0
			var int i
			for i = 1 to pScaling.getCount()
				pScaling.setAt( i, ( pScaling.getAt( i ) cast int ) + diff )
			end
		end
	end
	
	public func int addScaling( int level, int value )
		var int index = indexFromLevel( level )
		var int old = pScaling.getAt( index ) cast int
		var int new = old + value
		pScaling.setAt( index, new )
		
		var int diff = tresUnlift( tresLift( new ) - tresLift( old ) )
		if diff != 0
			var int i
			for i = index + 1 to pScaling.getCount()
				pScaling.setAt( i, ( pScaling.getAt( i ) cast int ) + diff )
			end
		end
		
		return diff
	end
	
	
	public func void addNode( TerrainTreeNode node )
		pNodes.add( node )
	end
	
	
	public func Vector getVector()
		return Vector.new( pCoord.getX(), getScaling(), pCoord.getY() )
	end
	
	
	static private func int tresLift( int value )
		return ( value + 4 ) >> 3
	end
	
	static private func int tresUnlift( int value )
		return value << 3
	end
	
	static private func int tresPredict( int value )
		return ( value + 1 ) >> 1
	end
	
	
	public func String debug( String prefix )
		return prefix + "(" + pCoord.getX() + "," + pCoord.getY() + " rl=" + pRootLevel \
			+ " s=" + pScaling + " w=" + pWavelet + ")"
	end
end
