/* 
 * Trespasser Goes Drag[en]gine
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace TresGoesDE.Converting


pin Dragengine.Gui
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Terrain loader.
 */
class TerrainLoader extends FrameUpdateListener
	// Listener to notify task when terrain finished loading
	interface Listener
		// Terrain finished loading.
		func void finished( Terrain terrain )
		
		// Terrain failed loading.
		func void failed( Exception exception )
		
		// Print out log entry.
		func void log( String message )
		
		// Update progress bar.
		func void updateProgressBar( int range, int progress )
	end
	
	// Task state
	private enum State
		readHeader //<! Open file
		readNode //<! Read node
		subdivide //<! Subdivide
		recalcCoeff //<! Recalc coeff
		done //<! Reading finished
	end
	
	
	private class StepNode
		public var TerrainTreeNode node
		public var int index
		public func new( TerrainTreeNode node )
			this.node = node
			index = -1
		end
		public func String toString()
			return "StepNode(" + hashCode() + " " + index + " " + node.getCoordStart() + " " + node.getCoordEnd() + ")"
		end
	end
	
	
	private var Listener pListener
	private var String pFilename
	private var State pState
	private var Terrain pTerrain
	private var FileReader pReader
	private var BitReader pBitReader
	private var Array pNodeStack
	private var int pProcessedNodeCount
	private var Array pNodes
	private var int pNextIndex
	
	
	public func new( String filename, Listener listener )
		pFilename = filename
		pState = State.readHeader
		pListener = listener
		pNodeStack = Array.new()
		pNodes = Array.new()
	end
	
	public func void dispose()
		if pTerrain != null
			pTerrain.dispose()
			pTerrain = null
		end
		pNodeStack = null
		pNodes = null
	end
	
	
	// Cancel loading.
	public func void cancel()
		giveUp()
	end
	
	// Step loading
	public func void frameUpdate( float elapsed )
		try
			select pState
			case State.readHeader
				readHeader()
				
			case State.readNode
				readNode()
				
			case State.subdivide
				subdivide()
				
			case State.recalcCoeff
				recalcCoeff()
				
			case State.done
				giveUp()
			end
			
		catch Exception e
			giveUp()
			pState = State.done
			pListener.failed( e )
		end
	end
	
	
	// Open file and read header
	private func void readHeader()
		pReader = ConverterUtils.readTresFile( pFilename )
		pBitReader = BitReader.new( pFilename )
		pTerrain = Terrain.new( pFilename )
		pListener.log( "Loading WDT..." )
		
		// read header
		// int16: version, always 0x03E9 (1001)
		// int32: numTreeNodes, number of significant nodes
		// int32: Number of vertices
		// int32: rootCoef, the root wavelet coefficient
		var int version = pBitReader.read( 16 )
		pTerrain.setTotalNodeCount( pBitReader.read( 32 ) )
		pTerrain.setTotalVertexCount( pBitReader.read( 32 ) )
		pTerrain.setRootCoeff( pBitReader.read( 32 ) )
		
		GameApp.getApp().getConsole().addMessage( "totalNodeCount=" + pTerrain.getTotalNodeCount() \
			+ " totalVertexCount=" + pTerrain.getTotalVertexCount() + " rootCoeff=" + pTerrain.getRootCoeff() )
		
		if version != 1001
			throw EInvalidParam.new( "wrong version " + version )
		end
		
		readParameters()
		
		// table is read as bits starting with LSB for each byte
		// create root node
		var Point coordStart = pTerrain.getCoordStart()
		var Point coordEnd = pTerrain.getCoordEnd()
		
		var TerrainTreeNode tree = TerrainTreeNode.new( pTerrain, coordStart, coordEnd, false )
		pTerrain.setTree( tree )
		
		tree.addVertex( TerrainTreeVertex.new( coordStart ) )
		tree.addVertex( TerrainTreeVertex.new( Point.new( coordEnd.getX(), coordStart.getY() ) ) )
		tree.addVertex( TerrainTreeVertex.new( coordEnd ) )
		tree.addVertex( TerrainTreeVertex.new( Point.new( coordStart.getX(), coordEnd.getY() ) ) )
		
		tree.forEachVertex( block TerrainTreeVertex each
			pTerrain.treeVertexAdd( each )
			each.setScaling( pTerrain.getRootCoeff() )
			each.addNode( tree )
		end )
		
		pNodeStack.add( StepNode.new( tree ) )
		pState = State.readNode
	end
	
	private func void readParameters()
		/*
		original code is doing very ugly thinkgs. it reads bit-data straight into struct
		pointer cast to char*. this is the struct definition:
		
		struct SMapping{
		   CRectangle<int> rcQuadSpaceExtents;		// Extents of quad tree, forced square and rounded to the nearest power of two.
		   CRectangle<>    rcWorldSpaceExtents;	// Extents world space data.
		   CTransLinear2<> tlr2QuadToWorld;		// Conversion from 2D quad tree units to world space.
		   CTransLinear2<> tlr2WorldToQuad;		// Conversion from world space to 2D quad tree units.
		   TReal rWorldToCoef;						// Coeficient quantisation scalar.
		   TReal rCoefToWorld;						// De-quantise to world space.
		   TReal rCoefToQuad;						// De-quantise to quad space.
		}
		
		CRectangle<int> = CVector2<TR> v2Start_, v2Size_;
		CRectangle<> = CRectangle<TReal>
		CVector2<TR> = TR tX, tY
		CTransLinear2<> = CTransLinear<TR> tlrX, tlrY;
		CTransLinear<TR> = TR tScale, tOffset;
		TReal = float
		
		flattening the entire struct yields this:
		
		struct SMapping{
		   int rcQuadSpaceExtents.v2Start_.tX;
		   int rcQuadSpaceExtents.v2Start_.tY;
		   int rcQuadSpaceExtents.v2Size_.tX;
		   int rcQuadSpaceExtents.v2Size_.tY;
		   
		   float rcWorldSpaceExtents.v2Start_.tX;
		   float rcWorldSpaceExtents.v2Start_.tY;
		   float rcWorldSpaceExtents.v2Size_.tX;
		   float rcWorldSpaceExtents.v2Size_.tY;
		   
		   float tlr2QuadToWorld.tlrX.tScale;
		   float tlr2QuadToWorld.tlrX.tOffset;
		   float tlr2QuadToWorld.tlrY.tScale;
		   float tlr2QuadToWorld.tlrY.tOffset;
		   
		   float tlr2WorldToQuad.tlrX.tScale;
		   float tlr2WorldToQuad.tlrX.tOffset;
		   float tlr2WorldToQuad.tlrY.tScale;
		   float tlr2WorldToQuad.tlrY.tOffset;
		   
		   float rWorldToCoef;
		   float rCoefToWorld;
		   float rCoefToQuad;
		}
		
		the problem here is that we need to read the entire struct bit-wise but then we
		have to read the values inside using structed types. to solve this the data is
		read byte-wise (in groups of 8 bits) and stored in a temporary memory file.
		from there we can then read structured types
		*/
		var MemoryFile memoryFile = MemoryFile.new( "wtd-parameters" )
		var FileWriter memoryFileWriter = memoryFile.getWriter( true )
		var int i, count = 4 * 19
		for i = 0 to count
			memoryFileWriter.writeByte( pBitReader.read( 8 ) )
		end
		
		var FileReader memoryFileReader = memoryFile.getReader()
		
		var Array values = Array.new()
		for i = 0 to 4
			values.add( memoryFileReader.readUInt() )
		end
		for i = 0 to 15
			values.add( memoryFileReader.readFloat() )
		end
		
		// extents of the terrain area quadtree in vertices/points
		pTerrain.setCoord( \
			Point.new( values.getAt( 0 ) cast int, values.getAt( 1 ) cast int ), \
			Point.new( values.getAt( 2 ) cast int, values.getAt( 3 ) cast int ) )
		GameApp.getApp().getConsole().addMessage( "coordStart=" + pTerrain.getCoordStart() \
			+ " coordSize=" + pTerrain.getCoordSize() )
		
		// terrain area quad in world coords
		pTerrain.setTerPos( Vector2.new( values.getAt( 4 ) cast float, values.getAt( 5 ) cast float ) )
		pTerrain.setTerSize( Vector2.new( values.getAt( 6 ) cast float, values.getAt( 7 ) cast float ) )
		GameApp.getApp().getConsole().addMessage( "terPos=" + pTerrain.getTerPos() \
			+ " terSize=" + pTerrain.getTerSize() )
		
		// wavelet->world x/y transform, first scale then translation, with finest nodes on
		// unit integer coordinates in range (0,0)-(leafNodes.x, leafNodes.y)
		// 
		//  scale.xy  = terSize.xy / ( coordStart.xy - coordStart.xy )
		//             = worldExtend.xy / ( maxIndex.xy - minIndex.xy )
		//   offset.xy = terrainPos.xy = minWorld.xy
		pTerrain.setW2tScale( Vector2.new( values.getAt( 8 ) cast float, values.getAt( 10 ) cast float ) )
		pTerrain.setW2tOffset( Vector2.new( values.getAt( 9 ) cast float, values.getAt( 11 ) cast float ) )
		GameApp.getApp().getConsole().addMessage( "w2tScale=" + pTerrain.getW2tScale() \
			+ " w2tOffset=" + pTerrain.getW2tOffset() )
		
		// world->wavelet x/y transform, first scale then translation
		// invScale = 1/scale
		// invOffset = -offset/scale
// 		pTerrain.setT2wScale( Vector2.new( values.getAt( 12 ) cast float, values.getAt( 14 ) cast float ) )
// 		pTerrain.setT2wOffset( Vector2.new( values.getAt( 13 ) cast float, values.getAt( 15 ) cast float ) )
		
		// re-calculate the inverse parameters. they seem slightly off in the file
		pTerrain.setT2wScale( Vector2.new( 1.0 / pTerrain.getW2tScale().getX(), 1.0 / pTerrain.getW2tScale().getY() ) )
		pTerrain.setT2wOffset( Vector2.new( -pTerrain.getW2tOffset().getX() / pTerrain.getW2tScale().getX(), \
			-pTerrain.getW2tOffset().getY() / pTerrain.getW2tScale().getY() ) )
		GameApp.getApp().getConsole().addMessage( "t2wScale=" + pTerrain.getT2wScale() \
			+ " t2wOffset=" + pTerrain.getT2wOffset() )
		
		// converting the height values
		// 
		// heightScale = 2^Qbits / Max Height
		//   where Qbits is the number of bits used during quantisation (by default 16,
		//   so Scale Z = 65536 / Max Height)
		//   world->wavelet z scale
		// 
		// heightScaleInv = Max Height / 2^Qbits
		//   wavelet->world z scale
		// 
		// qFactor = Max Height / (Scale.x * 2^Qbits)
		//   possibly used to scale the height together with the horizontal coordinates (XY)
		pTerrain.setHeightScale( values.getAt( 16 ) cast float )
		pTerrain.setHeightScaleInv( values.getAt( 17 ) cast float )
		pTerrain.setHeightQFactor( values.getAt( 18 ) cast float )
		GameApp.getApp().getConsole().addMessage( "heightScale=" + pTerrain.getHeightScale() \
			+ " heightScaleInv=" + pTerrain.getHeightScaleInv() + " heightQFactor=" \
			+ pTerrain.getHeightQFactor() )
	end
	
	// Read ZeroTree.
	private func void readNode()
		var int i
		for i = 0 to 50
			readSingleNode()
			if pState != State.readNode
				if pTerrain.getTotalNodeCount() == 0
					pTerrain.setTotalNodeCount( pProcessedNodeCount )
				end
				break
			end
		end
	end
	
	private func void readSingleNode()
		if pNodeStack.getCount() == 0
			pState = State.subdivide
			pNextIndex = -1
			return
		end
		
		//GameApp.getApp().getConsole().addMessage("stack " + pNodeStack)
		var StepNode stepNode = pNodeStack.getAt( -1 ) cast StepNode
		
		if stepNode.index == -1
			pListener.updateProgressBar( pTerrain.getTotalNodeCount(), pProcessedNodeCount++ )
			pNodes.add( stepNode.node )
			
			if pBitReader.read( 1 ) == 0
				//GameApp.getApp().getConsole().addMessage("empty")
				stepNode.node.dropChildren()
				pNodeStack.removeFrom( pNodeStack.getCount() - 1 )
				nextChild()
				readSingleNode()
				return
			end
			
			var int dataBitCount = 30 // initial value
			var int maxRegionBits = 30
			
			var TerrainTreeNode parent = stepNode.node.getParent()
			if parent != null
				dataBitCount = parent.getDataBitCount()
				maxRegionBits = tresULog2( parent.getMaxCoeff() ) + 1
			end
			
			if dataBitCount == 0
				throw EInvalidParam.new( "dataBitCount in parent is 0" )
			end
			
			stepNode.node.setDataBitCount( tresULog2( pBitReader.read( dataBitCount ) ) + 1 )
			
			stepNode.node.setMaxCoeff( pBitReader.read( maxRegionBits ) )
			// GameApp.getApp().getConsole().addMessage( "p) maxCoeff=" + stepNode.node.getMaxCoeff() )
			
			var int coeffBitCount = tresULog2( stepNode.node.getMaxCoeff() ) + 2
			var int v1 = pBitReader.read( coeffBitCount )
			var int v2 = pBitReader.read( coeffBitCount )
			var int v3 = pBitReader.read( coeffBitCount )
			
			if not ( tresULog2( v1 ) <= tresULog2( stepNode.node.getMaxCoeff() ) + 1 )
				throw EInvalidParam.new( "assertion failed for coeff 1" )
			end
			if not ( tresULog2( v2 ) <= tresULog2( stepNode.node.getMaxCoeff() ) + 1 )
				throw EInvalidParam.new( "assertion failed for coeff 2" )
			end
			if not ( tresULog2( v3 ) <= tresULog2( stepNode.node.getMaxCoeff() ) + 1 )
				throw EInvalidParam.new( "assertion failed for coeff 3" )
			end
			
			stepNode.node.setCoeffAt( 0, convCoeffVal( v1 ) )
			stepNode.node.setCoeffAt( 1, convCoeffVal( v2 ) )
			stepNode.node.setCoeffAt( 2, convCoeffVal( v3 ) )
			/*
			GameApp.getApp().getConsole().addMessage( "coeff=" + Array.newWith( stepNode.node.getCoeffAt( 0 ), \
				stepNode.node.getCoeffAt( 1 ), stepNode.node.getCoeffAt( 2 ) ) )
			*/
			/*
			GameApp.getApp().getConsole().addMessage( String.new(' ', stepNode.node.getLevel()*2) \
				+ "- dataBitCount=" + stepNode.node.getDataBitCount() + " maxCoeff=" \
				+ stepNode.node.getMaxCoeff() + " coeff=" + Array.newWith(\
					stepNode.node.getCoeffAt(0), stepNode.node.getCoeffAt(1), stepNode.node.getCoeffAt(2)))
			*/
			stepNode.index = 0
		end
		
		var RectArea boundary = stepNode.node.getBoundary()
		var int nx1 = ( boundary.getX2() + boundary.getX1() ) / 2
		var int ny1 = ( boundary.getY2() + boundary.getY1() ) / 2
		var TerrainTreeNode child
		
		select stepNode.index
		case 0
			child = TerrainTreeNode.new( pTerrain, \
				Point.new( boundary.getX1(), boundary.getY1() ), Point.new( nx1, ny1 ), false )
			
		case 1
			child = TerrainTreeNode.new( pTerrain, \
				Point.new( nx1, boundary.getY1() ), Point.new( boundary.getX2(), ny1 ), true )
			
		case 2
			child = TerrainTreeNode.new( pTerrain, \
				Point.new( nx1, ny1 ), Point.new( boundary.getX2(), boundary.getY2() ), false )
			
		case 3
			child = TerrainTreeNode.new( pTerrain, \
				Point.new( boundary.getX1(), ny1 ), Point.new( nx1, boundary.getY2() ), true )
		end
		
		child.setParent( stepNode.node )
		child.setLevel( stepNode.node.getLevel() + 1 )
		stepNode.node.addChild( child )
		pNodeStack.add( StepNode.new( child ) )
	end
	
	// Trespasser verion of unsigned log2
	private func int tresULog2( int value )
		// return DEMath.log2( value cast float ) cast int  // would this work too?
		var int u_msb16 = ( ( value & 0hffff0000) != 0 ) << 4
		value = value >> u_msb16
		
		var int u_msb8 = ( ( value & 0hff00 ) != 0 ) << 3
		value = value >> u_msb8
		
		var int u_msb4 = ( ( value & 0hf0 ) != 0 ) << 2
		value = value >> u_msb4
		
		var int u_msb2 = ( ( value & 0hc ) != 0 ) << 1
		value = value >> u_msb2
		
		var int u_msb1 = ( value >> 1 ) & 1
		
		return u_msb16 + u_msb8 + u_msb4 + u_msb2 + u_msb1
	end
	
	// Convert coefficient.
	private func int convCoeffVal( int value )
		// careful with the coefficients. another funny conversion is going on hard to see in
		// the code. first the value is read as uint32 value and stored in a CBitSignificance
		// instance. the tricky part is by calling int(bitsig). this uses an int-cast-operator
		// which in turn calculates a sort of 2-bit complement. I shudder just thinking at
		// this massive forth and back converting smeared across various code files. in the
		// method below value is uint32 and the result is int32:
		var int i2c = value >> 1
		var int signMask = ( ~value & 1 ) - 1
		i2c = i2c ^ signMask
		i2c = i2c - signMask
		return i2c
	end
	
	// Next child.
	private func void nextChild()
		while pNodeStack.getCount() > 0
			var StepNode stepNode = pNodeStack.getAt( -1 ) cast StepNode
			stepNode.index++
			if stepNode.index < 4
				return
			end
			
			pNodeStack.removeFrom( pNodeStack.getCount() - 1 )
		end
	end
	
	// Subdivide
	private func void subdivide()
		if pNextIndex == -1
			pListener.log( "Subdivide..." )
			pNextIndex = 0
		end
		
		var int count = pNodes.getCount()
		var int last = DEMath.min( pNextIndex + 50, count )
		for pNextIndex = pNextIndex to last
			( pNodes.getAt( pNextIndex ) cast TerrainTreeNode ).subdivide( pTerrain, false )
		end
		pListener.updateProgressBar( pNodes.getCount(), last )
		
		if last == count
			pState = State.recalcCoeff
			pNextIndex = -1
		end
	end
	
	// Recalculate coefficients
	public func void recalcCoeff()
		if pNextIndex == -1
			pListener.log( "Recalculate coefficients..." )
			pNextIndex = 0
		end
		
		var int count = pNodes.getCount()
		var int last = DEMath.min( pNextIndex + 50, count )
		for pNextIndex = pNextIndex to last
			( pNodes.getAt( pNextIndex ) cast TerrainTreeNode ).recalcDscScalingCoef( false )
		end
		pListener.updateProgressBar( pNodes.getCount(), last )
		
		if last == count
			giveUp()
			pState = State.done
			var Terrain terrain = pTerrain
			pTerrain = null
			pListener.finished( terrain )
		end
	end
end
