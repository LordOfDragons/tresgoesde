/* 
 * Trespasser Goes Drag[en]gine
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace TresGoesDE.Converting


pin Dragengine.Gui
pin Dragengine.Scenery


/**
 * Terrain tree node.
 */
class TerrainTreeNode
	private var TerrainTreeNode pParent
	private var Point pCoordStart
	private var Point pCoordEnd
	private var bool pFlipDiagonal
	private var Array pVertices
	
	private var int pLevel
	private var Array pChildren
	private var int pDataBitCount
	private var int pMaxCoeff
	private var Array pCoeff
	private var RectArea pBoundary
	
	private var bool pIsBorderMinX
	private var bool pIsBorderMaxX
	private var bool pIsBorderMinY
	private var bool pIsBorderMaxY
	
	
	public func new( Terrain terrain,  Point coordStart, Point coordEnd, bool flippedDiagonal )
		pCoordStart = coordStart
		pCoordEnd = coordEnd
		pFlipDiagonal = flippedDiagonal
		pChildren = Array.new()
		
		pCoeff = Array.newWith( 0, 0, 0 )
		pBoundary = RectArea.new( coordStart, coordEnd - coordStart )
		pVertices = Array.new()
		
		pIsBorderMinX = coordStart.getX() == terrain.getCoordStart().getX()
		pIsBorderMaxX = coordEnd.getX() == terrain.getCoordEnd().getX()
		pIsBorderMinY = coordStart.getY() == terrain.getCoordStart().getY()
		pIsBorderMaxY = coordEnd.getY() == terrain.getCoordEnd().getY()
	end
	
	public func void dispose()
		pParent = null
		pVertices = null
		if pChildren != null
			pChildren.forEach( block TerrainTreeNode each
				each.dispose()
			end )
		end
	end
	
	
	public func TerrainTreeNode getParent()
		return pParent
	end
	
	public func void setParent( TerrainTreeNode parent )
		pParent = parent
	end
	
	public func Point getCoordStart()
		return pCoordStart
	end
	
	public func Point getCoordEnd()
		return pCoordEnd
	end
	
	public func bool getFlipDiagonal()
		return pFlipDiagonal
	end
	
	public func int getDataBitCount()
		return pDataBitCount
	end
	
	public func void setDataBitCount( int bitcount )
		if bitcount < 0
			throw EInvalidParam.new( "bitcount < 0" )
		end
		if bitcount > 30
			throw EInvalidParam.new( "bitcount > 30" )
		end
		pDataBitCount = bitcount
	end
	
	public func int getMaxCoeff()
		return pMaxCoeff
	end
	
	public func void setMaxCoeff( int maxCoeff )
		pMaxCoeff = maxCoeff
	end
	
	public func int getCoeffAt( int index )
		return pCoeff.getAt( index ) cast int
	end
	
	public func void setCoeffAt( int index, int coeff )
		pCoeff.setAt( index, coeff )
	end
	
	public func RectArea getBoundary()
		return pBoundary
	end
	
	public func int getLevel()
		return pLevel
	end
	
	public func void setLevel( int level )
		pLevel = level
	end
	
	
	public func void addVertex( TerrainTreeVertex vertex )
		pVertices.add( vertex )
	end
	
	public func TerrainTreeVertex getVertexAt( int index )
		return pVertices.getAt( index ) cast TerrainTreeVertex
	end
	
	public func void forEachVertex( Block ablock )
		pVertices.forEach( ablock )
	end
	
	
	public func bool hasChildren()
		return pChildren != null
	end
	
	public func TerrainTreeNode getChildAt( int index )
		return pChildren.getAt( index ) cast TerrainTreeNode
	end
	
	public func void addChild( TerrainTreeNode child )
		pChildren.add( child )
	end
	
	public func void dropChildren()
		pChildren = null
	end
	
	
	public func void visitTriangles( Terrain.TriangleVisitor visitor )
		if pChildren != null
			pChildren.forEach( block TerrainTreeNode each
				each.visitTriangles( visitor )
			end )
			return
		end
		
		var Vector v1 = getVertexAt( 0 ).getVector()
		var Vector v2 = getVertexAt( 1 ).getVector()
		var Vector v3 = getVertexAt( 2 ).getVector()
		var Vector v4 = getVertexAt( 3 ).getVector()
		
		if pFlipDiagonal
			visitor.visitTriangle( v1, v4, v3 )
			visitor.visitTriangle( v1, v3, v2 )
			
		else
			visitor.visitTriangle( v4, v3, v2 )
			visitor.visitTriangle( v4, v2, v1 )
		end
	end
	
	public func void subdivide( Terrain terrain, bool recursive )
		if pChildren == null
			return
		end
		
		/*
		GameApp.getApp().getConsole().addMessage("ENTER Subdivide " \
			+ getVertexAt( 0 ).debug(" v1") \
			+ getVertexAt( 1 ).debug(" v2") \
			+ getVertexAt( 2 ).debug(" v3") \
			+ getVertexAt( 3 ).debug(" v4") )
		*/
		
		// find or create new vertices located along split edges including center
		var Array nvertices = Array.new()
		var TerrainTreeVertex ev1, ev2, v
		var int i
		
		for i = 0 to 4
			ev1 = getVertexAt( i )
			ev2 = getVertexAt( ( i + 1 ) % 4 )
			v = terrain.getTreeVertexAt( ( ev1.getCoord() + ev2.getCoord() ) / 2 )
			if v == null
				v = TerrainTreeVertex.new( ev1, ev2 )
				terrain.treeVertexAdd( v )
			end
			nvertices.add( v )
		end
		
		if pFlipDiagonal
			ev1 = getVertexAt( 1 )
			ev2 = getVertexAt( 3 )
			
		else
			ev1 = getVertexAt( 0 )
			ev2 = getVertexAt( 2 )
		end
		
		v = TerrainTreeVertex.new( ev1, ev2 )
		terrain.treeVertexAdd( v )
		nvertices.add( v )
		
		// assign wavelet coefficients to vertices
		( nvertices.getAt( 0 ) cast TerrainTreeVertex ).setWavelet( pCoeff.getAt( 0 ) cast int )
		( nvertices.getAt( 4 ) cast TerrainTreeVertex ).setWavelet( pCoeff.getAt( 1 ) cast int )
		( nvertices.getAt( 3 ) cast TerrainTreeVertex ).setWavelet( pCoeff.getAt( 2 ) cast int )
		
		// assign vertices to children
		var TerrainTreeNode child = getChildAt( 0 )
		child.pVertices = Array.newWith( pVertices.getAt( 0 ), nvertices.getAt( 0 ), \
			nvertices.getAt( 4 ), nvertices.getAt( 3 ) )
		child.pVertices.forEach( block TerrainTreeVertex each
			each.addNode( child )
		end )
		
		child = getChildAt( 1 )
		child.pVertices = Array.newWith( nvertices.getAt( 0 ), pVertices.getAt( 1 ), \
			nvertices.getAt( 1 ), nvertices.getAt( 4 ) )
		child.pVertices.forEach( block TerrainTreeVertex each
			each.addNode( child )
		end )
		
		child = getChildAt( 2 )
		child.pVertices = Array.newWith( nvertices.getAt( 4 ), nvertices.getAt( 1 ), \
			pVertices.getAt( 2 ), nvertices.getAt( 2 ) )
		child.pVertices.forEach( block TerrainTreeVertex each
			each.addNode( child )
		end )
		
		child = getChildAt( 3 )
		child.pVertices = Array.newWith( nvertices.getAt( 3 ), nvertices.getAt( 4 ), \
			nvertices.getAt( 2 ), pVertices.getAt( 3 ) )
		child.pVertices.forEach( block TerrainTreeVertex each
			each.addNode( child )
		end )
		
		// update corners with wavelets
// 		GameApp.getApp().getConsole().addMessage("  coefs=" + pCoeff )
		var Array corners = accumulateWavelets()
<<<<<<< Updated upstream
// 		GameApp.getApp().getConsole().addMessage("  corners=" + corners )
// 		GameApp.getApp().getConsole().addMessage("  beforeUpdate " + debug1())
=======
		GameApp.getApp().getConsole().addMessage("  corners=" + corners )
		var int level = ( ( pChildren.getAt( 0 ) cast TerrainTreeNode ).pVertices.at( 2 ) cast TerrainTreeVertex ).getRootLevel()
>>>>>>> Stashed changes
		for i = 0 to 4
			getVertexAt( i ).addScaling( corners.getAt( i ) cast int )
		end
		
		// calling this here has no effect compared to calling it at after all subdivides have been done?
		recalcDscScalingCoef( false )
		// call recalcDscScalingCoef() on all neighbors
		
		if recursive
			pChildren.forEach( block TerrainTreeNode each
				each.subdivide( terrain, recursive )
			end )
		end
		
		/*
		GameApp.getApp().getConsole().addMessage("EXIT Subdivide " \
			+ getVertexAt( 0 ).debug(" v1") \
			+ getVertexAt( 1 ).debug(" v2") \
			+ getVertexAt( 2 ).debug(" v3") \
			+ getVertexAt( 3 ).debug(" v4") )
		*/
		GameApp.getApp().getConsole().addMessage("Subdivide " + debug1())
		GameApp.getApp().getConsole().addMessage("  sub0" + getChildAt(0).debug1())
		GameApp.getApp().getConsole().addMessage("  sub1" + getChildAt(1).debug1())
		GameApp.getApp().getConsole().addMessage("  sub2" + getChildAt(2).debug1())
		GameApp.getApp().getConsole().addMessage("  sub3" + getChildAt(3).debug1())
	end
	
	private func String debug1()
		return " v[" \
				+ "(" + getVertexAt(0).getCoord().getX() + "," + getVertexAt(0).getCoord().getY() + ")" \
				+ " (" + getVertexAt(1).getCoord().getX() + "," + getVertexAt(1).getCoord().getY() + ")" \
				+ " (" + getVertexAt(2).getCoord().getX() + "," + getVertexAt(2).getCoord().getY() + ")" \
				+ " (" + getVertexAt(3).getCoord().getX() + "," + getVertexAt(3).getCoord().getY() + ")" \
			+ "] w=[" \
				+ getVertexAt(0).getWavelet() \
				+ " " + getVertexAt(1).getWavelet() \
				+ " " + getVertexAt(2).getWavelet() \
				+ " " + getVertexAt(3).getWavelet() \
			+ "] s=[" \
				+ getVertexAt(0).getRawScaling() \
				+ " " + getVertexAt(1).getRawScaling() \
				+ " " + getVertexAt(2).getRawScaling() \
				+ " " + getVertexAt(3).getRawScaling() \
			+ "]"
	end
	
	// translated from original trespasser code. returns accumulated wavelts as 4 element array
	public func Array accumulateWavelets()
		// accumulate the wavelet coeficients of this node as dictated by the definition of the 0-disc wavelet.
		var int coef0 = pCoeff.getAt( 0 ) cast int
		var int coef1 = pCoeff.getAt( 1 ) cast int
		var int coef2 = pCoeff.getAt( 2 ) cast int
		
		var int c0 = coef0 + coef2
		var int c1 = coef0
		var int c2 = 0
		var int c3 = coef2
		
		if pFlipDiagonal
			c1 = c1 + coef1
			c3 = c3 + coef1
			
		else
			c0 = c0 + coef1
			c2 = c2 + coef1
		end
		
		// the wavelet data is reflected at the borders
		if pIsBorderMinX
			c0 = c0 + coef0
			if pFlipDiagonal
				c3 = c3 + coef1
				
			else
				c0 = c0 + coef1
			end
		end
		
		if pIsBorderMinY
			c0 = c0 + coef2
			
			if pFlipDiagonal
				c1 = c1 + coef1
				
			else
				c0 = c0 + coef1
			end
		end
		
		if pIsBorderMinX and pIsBorderMinY
			c0 = c0 + coef1
		end
		
		return Array.newWith( c0, c1, c2, c3 )
	end
	
	// translated from original trespasser code
	public func void recalcDscScalingCoef( bool descent )
		if pChildren == null
			return
		end
		
		// at the boundary of the quad tree, make sure the descendant scaling coeficients are
		// calculated from this node's reflected scaling coeficients.
		var TerrainTreeNode child0 = getChildAt( 0 )
		
		if pIsBorderMaxX
			getVertexAt( 1 ).copyScaling( getVertexAt( 0 ) )
			getVertexAt( 2 ).copyScaling( getVertexAt( 3 ) )
		end
		
		if pIsBorderMaxY
			getVertexAt( 2 ).copyScaling( getVertexAt( 1 ) )
			getVertexAt( 3 ).copyScaling( getVertexAt( 0 ) )
		end
		
		var int i
		for i = 0 to 4
			getChildAt( i ).getVertexAt( ( i + 1 ) % 4 ).updateScaling( \
				getVertexAt( i ), getVertexAt( ( i + 1 ) % 4 ) )
		end
		
		if pFlipDiagonal
			child0.getVertexAt( 2 ).updateScaling( getVertexAt( 1 ), getVertexAt( 3 ) )
			
		else
			child0.getVertexAt( 2 ).updateScaling( getVertexAt( 0 ), getVertexAt( 2 ) )
		end
		
		if descent
			pChildren.forEach( block TerrainTreeNode each
				each.recalcDscScalingCoef( true )
			end )
		end
	end
end
