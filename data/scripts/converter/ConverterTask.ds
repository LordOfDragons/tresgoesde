/* 
 * Trespasser Goes Drag[en]gine
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace TresGoesDE.Converting

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Task converter from Trespasser to Drag[en]gine. Supports stepping since converting
 * takes some time. Updates progress using a listener.
 */
class ConverterTask extends FrameUpdateListener \
implements GroffLoader.Listener, PidFileLoader.Listener, TerrainLoader.Listener
	// Listener used to shows progress update.
	interface Listener
		// Print out log entry.
		func void log( String message )
		
		// Converting finished successfully.
		func void succeeded()
		
		// Converting failed with an exception.
		func void failed( Exception exception )
		
		// Update progress bar.
		func void updateProgressBar( int range, int progress )
	end
	
	// Task state
	private enum State
		clear //<! Clear output directory
		loadPidFile //<! Load pid file
		loadGroff //<! Load groff file
		mergeMappings //<! Merge mappings into geometry
		propagateDiffuse //<! Propagate 'Diffuse' property in instances to materials
		propagateSubMaterial //<! Propagate 'SubMaterialXX' properties in instances to materials
		calcMaterialPids //<! Calculate material PIDs
		loadTerrain //<! Load terrain
		createTerrainMesh //<! Create terrain mesh
		rasterTerrainHeightMap //<! Raster terrain height map
		loadSwp //<! Load swp
		exportInstances //<! Export instances
		exportWorld //<! Write world
		exportTerrain //<! Write terrain
		exportModels //<! Write models
		exportOcclusionMeshes //<! Write occlusion meshes
		exportSkins //<! Write skins
		done //<! Task is done
	end
	
	
	private var String pBaseFilename //<! Filename of scene to convert
	private var Listener pListener
	
	private var State pState
	private var String pMapName
	private var File pInputDir
	private var File pOutputDir
	private var GroffLoader pGroffLoader
	private var Groff pGroff
	private var PidFileLoader pPidFileLoader
	private var PidFile pPidFile
	private var SpzFile pSpzFile
	private var SwpFile pSwpFile
	private var TerrainLoader pTerrainLoader
	private var TerrainMeshCreator pTerrainMeshCreator
	private var Terrain pTerrain
	
	private var int pNextIndex
	private var Array pCollector
	private var GroffValueName pPropertyNameDiffuse
	private var Array pPropertySubMaterial
	
	private var Exporter pExporter
	private var ExportWorld pExportWorld
	private var GroffValueName pPropertyClass
	private var GroffValueName pPropertyVisible
	
	
	// Create converter task.
	public func new( String baseFilename, Listener listener )
		pBaseFilename = baseFilename
		pMapName = File.new( baseFilename ).getName()
		pInputDir = File.new( GameApp.getGameApp().getConverter().getPathTrespasser() ) \
			+ File.new( baseFilename ).getParent()
		pOutputDir = File.new( GameApp.getGameApp().getConverter().getPathDragengine(), pMapName )
		pExporter = Exporter.new( pOutputDir )
		pListener = listener
		pState = State.clear
	end
	
	
	// Step converter task
	public func void frameUpdate( float elapsed )
		try
			select pState
			case State.clear
				clear()
				
			case State.loadGroff
				loadGroff()
				
			case State.mergeMappings
				mergeMappings()
				
			case State.propagateDiffuse
				propagateDiffuse()
				
			case State.propagateSubMaterial
				propagateSubMaterial()
				
			case State.calcMaterialPids
				calcMaterialPids()
				
			case State.loadPidFile
				loadPidFile()
				
			case State.loadTerrain
				loadTerrain()
				
			case State.createTerrainMesh
				createTerrainMesh()
				
			case State.rasterTerrainHeightMap
				rasterTerrainHeightMap()
				
			case State.loadSwp
				loadSwp()
				
			case State.exportInstances
				exportInstances()
				
			case State.exportWorld
				exportWorld()
				
			case State.exportTerrain
				exportTerrain()
				
			case State.exportModels
				exportModels()
				
			case State.exportOcclusionMeshes
				exportOcclusionMeshes()
				
			case State.exportSkins
				exportSkins()
				
			case State.done
				giveUp()
				pListener = null
			end
			
		catch Exception e
			failed( e )
		end
	end
	
	// Cancel task
	public func void cancel()
		pListener.log( "Cancelled. Cleaning up..." )
		if FileSystem.existsFile( pOutputDir.getPath() )
			deleteDirectory( pOutputDir.getPath() )
		end
		pListener.failed( Exception.new( "Cancelled" ) )
		cleanUp()
	end
	
	
	// Clear output directory
	private func void clear()
		pListener.log( "Delete output directory..." )
		if FileSystem.existsFile( pOutputDir.getPath() )
			deleteDirectory( pOutputDir.getPath() )
		end
		pState = State.loadPidFile
	end
	
	private func void deleteDirectory( String directory )
		var Array files = Array.new()
		
		FileSystem.searchFiles( directory, false, block String path, FileType type
			select type
			case FileType.file
				files.add( path )
				
			case FileType.directory
				deleteDirectory( path )
				files.add( path )
			end
			return true
		end )
		
		files.forEach( block String each
			FileSystem.deleteFile( each )
		end )
		FileSystem.deleteFile( directory )
	end
	
	// Load pid file
	private func void loadPidFile()
		if pPidFileLoader != null
			return
		end
		
		pListener.log( "Load PID " + pMapName + ".pid ..." )
		pPidFileLoader = PidFileLoader.new( ( pInputDir + ( pMapName + "-130.pid" ) ).getPath(), this )
	end
	
	public func void finished( PidFile pidFile )
		pPidFile = pidFile
		pPidFileLoader = null
		pState = State.loadGroff
		
		// DEBUG
		/*var FileWriter writer = FileWriter.new( "/converter/debug_pids" )
		pPidFile.forEachPid( block PidFileEntry each
			writer.writeString( "pid " + each.getPid() + "\n" )
		end )*/
	end
	
	// Load groff file
	private func void loadGroff()
		if pGroffLoader != null
			return
		end
		
		pListener.log( "Load GRF " + pMapName + ".grf ..." )
		pGroffLoader = GroffLoader.new( ( pInputDir + ( pMapName + ".grf" ) ).getPath(), this )
	end
	
	public func void finished( Groff groff )
		pGroff = groff
		pGroffLoader = null
		
		pState = State.mergeMappings
		pNextIndex = -1
	end
	
	public func void updateProgressBar( int range, int progress )
		pListener.updateProgressBar( range, progress )
	end
	
	// Merge groff mappings into geometry.
	private func void mergeMappings()
		if pNextIndex == -1
			pListener.log( "Merge Mappings Into Geometry..." )
			pCollector = Array.new()
			pGroff.forEachModel( block GroffModel each
				pCollector.add( each )
			end )
			pNextIndex = 0
		end
		
		var int count = pCollector.getCount()
		var int last = DEMath.min( pNextIndex + 10, count )
		pCollector.forEach( pNextIndex, last, block GroffModel model
			var GroffMapping mapping = model.getMapping()
			if mapping != null and mapping.getVertexCount() > 0 and mapping.getFaceCount() > 0
				var GroffGeometry geometry = model.getGeometry()
				var int i, j, count = mapping.getFaceCount()
				for i = 0 to count
					var GroffGeometryFace face = geometry.getFaceAt( i )
					face.setMaterial( mapping.getFaceMaterialAt( i ) )
					if face.getMaterial() >= geometry.getMaterialCount()
						geometry.setMaterialCount( face.getMaterial() + 1 )
					end
					for j = 0 to 3
						face.setTexCoordAt( j, mapping.getTexCoordAt( mapping.getFaceVertexAt( i * 3 + j ) ) )
					end
				end
			end
		end )
		pNextIndex = last
		pListener.updateProgressBar( count, last )
		
		if last == count
			pState = State.propagateDiffuse
			pNextIndex = -1
		end
	end
	
	// Propagate 'Diffuse' property in instances to materials
	private func void propagateDiffuse()
		if pNextIndex == -1
			pListener.log( "Propage 'Diffuse' properties..." )
			pCollector = Array.new()
			pPropertyNameDiffuse = pGroff.getValueNameByNameOrNull( "Diffuse" )
			if pPropertyNameDiffuse != null
				pGroff.forEachInstance( block GroffInstance each
					pCollector.add( each )
				end )
			end
			pNextIndex = 0
		end
		
		var int count = pCollector.getCount()
		var int last = DEMath.min( pNextIndex + 10, count )
		pCollector.forEach( pNextIndex, last, block GroffInstance instance
			var GroffValue value = instance.getValueTable()
			if value != null
				var GroffValue property = value.getProperty( pPropertyNameDiffuse )
				if property != null
					var GroffMapping mapping = instance.getModel().getMapping()
					if mapping != null
						var GroffMaterial material = mapping.getMaterial()
						if material != null
							var int i, count = material.getMaterialCount()
							var float value = property.getDataFloat()
							for i = 0 to count
								material.setDiffuseValueAt( i, value )
							end
						end
					end
				end
			end
		end )
		pNextIndex = last
		pListener.updateProgressBar( count, last )
		
		if last == count
			pState = State.propagateSubMaterial
			pNextIndex = -1
		end
	end
	
	// Propagate 'SubMaterialXX' properties in instances to materials
	private func void propagateSubMaterial()
		if pNextIndex == -1
			pListener.log( "Propage 'SubMaterialXX' properties..." )
			pPropertySubMaterial = Array.new()
			pNextIndex = 0
		end
		
		var int count = pCollector.getCount()
		var int last = DEMath.min( pNextIndex + 10, count )
		pCollector.forEach( pNextIndex, last, block GroffInstance instance
			var GroffValue value = instance.getValueTable()
			if value != null
				var GroffMapping mapping = instance.getModel().getMapping()
				if mapping != null
					var GroffMaterial material = mapping.getMaterial()
					if material != null
						var int i
						for i = 0 to material.getMaterialCount()
							while pPropertySubMaterial.getCount() <= i
								var String name = "SubMaterial"
								if i < 10
									name = name + "0" + ( i + 1 )
								else
									name = name + ( i + 1 )
								end
								pPropertySubMaterial.add( pGroff.getValueNameByNameOrNull( name ) )
							end
							
							var GroffValueName name = pPropertySubMaterial.getAt( i ) cast GroffValueName
							if name != null
								var GroffValue property = value.getProperty( name )
								if property != null
									property = value.getProperty( pPropertyNameDiffuse )
									if property != null
										material.setDiffuseValueAt( i, property.getDataFloat() )
									end
								end
							end
						end
					end
				end
			end
		end )
		pNextIndex = last
		pListener.updateProgressBar( count, last )
		
		if last == count
			pState = State.calcMaterialPids
			pNextIndex = -1
		end
	end
	
	// Calculate material PIDs
	private func void calcMaterialPids()
		if pNextIndex == -1
			pListener.log( "Calculate Material PIDs..." )
			pCollector = Array.new()
			pGroff.forEachMaterial( block GroffMaterial each
				pCollector.add( each )
			end )
			pNextIndex = 0
		end
		
		var int count = pCollector.getCount()
		var int last = DEMath.min( pNextIndex + 10, count )
		pCollector.forEach( pNextIndex, last, block GroffMaterial material
			material.calculatePids( pPidFile )
			
			var int i, count = material.getMaterialCount()
			for i = 0 to count
				if ( not material.getColorMapAt( i ).getName().getName().empty() \
				or not material.getBumpMapAt( i ).getName().getName().empty() ) \
				and material.getPidAt( i ) == null
					pListener.log( "pid missing: '" + material.getColorMapAt( i ).getName().getName() \
						+ "', '" + material.getBumpMapAt( i ).getName().getName() + "', " \
						+ material.getDiffuseValueAt( i ) )
				end
			end
		end )
		pNextIndex = last
		pListener.updateProgressBar( count, last )
		
		if last == count
			pState = State.loadTerrain
		end
	end
	
	// Load terrain
	private func void loadTerrain()
		if pTerrainLoader != null
			return
		end
		
		pListener.log( "Load WDT " + pMapName + ".wtd ..." )
		pTerrainLoader = TerrainLoader.new( ( pInputDir + ( pMapName + ".wtd" ) ).getPath(), this )
	end
	
	public func void finished( Terrain terrain )
		pTerrain = terrain
		pTerrainLoader = null
		
		pState = State.createTerrainMesh
	end
	
	// Create terrain mesh.
	private func void createTerrainMesh()
		if pTerrainMeshCreator == null
			pListener.log( "Create Terrain Mesh ..." )
			pTerrainMeshCreator = TerrainMeshCreator.new( pTerrain )
		end
		
		if pTerrainMeshCreator.createMesh()
			pListener.updateProgressBar( pTerrainMeshCreator.getCreateProgressTarget(), pTerrainMeshCreator.getCreateProgress() )
			
		else
			pListener.log( "Raster Terrain Height Map..." )
			pState = State.rasterTerrainHeightMap
		end
	end
	
	// Raster terrain height map.
	private func void rasterTerrainHeightMap()
		if pTerrainMeshCreator.rasterHeightMap()
			pListener.updateProgressBar( pTerrainMeshCreator.getRasterProgressTarget(), pTerrainMeshCreator.getRasterProgress() )
			
		else
			pState = State.loadSwp
		end
	end
	
	// Load swp.
	private func void loadSwp()
		if pSwpFile == null
			if pSpzFile == null
				pListener.log( "Load SWP..." )
				var String filenameSwp = ( pInputDir + ( pMapName + "-130.swp" ) ).getPath()
				if FileSystem.existsFile( filenameSwp )
					pSwpFile = SwpFile.new( filenameSwp )
					
				else
					pListener.log( "Decompress SPZ..." )
					pSpzFile = SpzFile.new( ( pInputDir + ( pMapName + "-130.spz" ) ).getPath() )
				end
			end
			
			if pSpzFile != null
				if pSpzFile.read()
					pListener.updateProgressBar( pSpzFile.getReadTargetSize(), pSpzFile.getReadCurrentSize() )
					
				else
					var String filenameSwp = ( pInputDir + ( pMapName + "-130.swp" ) ).getPath()
					if FileSystem.canWriteFile( filenameSwp )
						FileWriter.new( filenameSwp ).writeData( pSpzFile.getData().getReader() )
					end
					pSwpFile = SwpFile.new( filenameSwp, pSpzFile.getData() )
				end
			end
			
		elif pSwpFile.read()
			pListener.updateProgressBar( pSwpFile.readTargetSize(), pSwpFile.readCurrentSize() )
			
		else
			pState = State.exportInstances
			pNextIndex = -1
		end
	end
	
	// Export instances
	private func void exportInstances()
		if pNextIndex == -1
			pListener.log( "Export instances..." )
			pPropertyClass = pGroff.getValueNameByNameOrNull( "Class" )
			pPropertyVisible = pGroff.getValueNameByNameOrNull( "Visible" )
			pCollector = Array.new()
			pGroff.forEachInstance( block GroffInstance each
				pCollector.add( each )
			end )
			pNextIndex = 0
		end
		
		var int count = pCollector.getCount()
		var int last = DEMath.min( pNextIndex + 10, count )
		pCollector.forEach( pNextIndex, last, block GroffInstance instance
			var ExportInstance einst = ExportInstance.new( instance )
			einst.prepare( pGroff, pPropertyClass, pPropertyVisible )
			if not einst.getClass().empty()
				pExporter.addInstance( einst )
			end
		end )
		pNextIndex = last
		pListener.updateProgressBar( count, last )
		
		if last == count
			pState = State.exportWorld
			pNextIndex = -1
		end
	end
	
	// Export world.
	private func void exportWorld()
		if pNextIndex == -1
			pListener.log( "Export world..." )
			pCollector = Array.new()
			pExporter.forEachInstance( block ExportInstance each
				pCollector.add( each )
			end )
			pExportWorld = ExportWorld.new( pExporter.getInstanceCount() )
			pNextIndex = 0
		end
		
		var int count = pCollector.getCount()
		var int last = DEMath.min( pNextIndex + 10, count )
		pCollector.forEach( pNextIndex, last, block ExportInstance instance
			instance.export( pExporter, pExportWorld )
		end )
		pNextIndex = last
		pListener.updateProgressBar( count, last )
		
		if last == count
			pExportWorld.finish( ( pExporter.getPathMapDir() + "map.deworld" ).getPath() )
			pExportWorld = null
			
			pState = State.exportTerrain
			pNextIndex = -1
		end
	end
	
	// Export terrain.
	private func void exportTerrain()
		pListener.log( "Export terrain..." )
		ExportTerrain.new( pTerrainMeshCreator ).export( pExporter )
		
		pState = State.exportModels
		pNextIndex = -1
	end
	
	// Export models.
	private func void exportModels()
		if pNextIndex == -1
			pListener.log( "Export models..." )
			pCollector = Array.new()
			pExporter.forEachModel( block GroffModel each
				pCollector.add( each )
			end )
			pNextIndex = 0
		end
		
		var int count = pCollector.getCount()
		var int last = DEMath.min( pNextIndex + 10, count )
		pCollector.forEach( pNextIndex, last, block GroffModel model
			ExportModel.new( model ).export( pExporter )
		end )
		pNextIndex = last
		pListener.updateProgressBar( count, last )
		
		if last == count
			pState = State.exportOcclusionMeshes
			pNextIndex = -1
		end
	end
	
	// Export occlusion meshes.
	private func void exportOcclusionMeshes()
		if pNextIndex == -1
			pListener.log( "Export occlusion meshes..." )
			pCollector = Array.new()
			pExporter.forEachOcclusionMesh( block GroffModel each
				pCollector.add( each )
			end )
			pNextIndex = 0
		end
		
		var int count = pCollector.getCount()
		var int last = DEMath.min( pNextIndex + 10, count )
		if pNextIndex < count
			pCollector.forEach( pNextIndex, last, block GroffModel model
				ExportOcclusionMesh.new( model ).export( pExporter )
			end )
		end
		pNextIndex = last
		pListener.updateProgressBar( count, last )
		
		if last == count
			pState = State.exportSkins
			pNextIndex = -1
		end
	end
	
	// Export skins.
	private func void exportSkins()
		if pNextIndex == -1
			pListener.log( "Export skins..." )
			pCollector = Array.new()
			pExporter.forEachSkin( block GroffModel each
				pCollector.add( each )
			end )
			pNextIndex = 0
		end
		
		var int count = pCollector.getCount()
		var int last = DEMath.min( pNextIndex + 1, count )
		if pNextIndex < count
			pCollector.forEach( pNextIndex, last, block GroffModel model
				ExportSkin.new( model ).export( pExporter, pSwpFile )
			end )
		end
		pNextIndex = last
		pListener.updateProgressBar( count, last )
		
		if last == count
			pListener.log( "Done" )
			pListener.succeeded()
			cleanUp()
		end
	end
	
	
	
	// Print out log entry.
	public func void log( String message )
		pListener.log( message )
	end
	
	// Failed
	public func void failed( Exception exception )
		if pListener == null
			return
		end
		
		pListener.failed( exception )
		cleanUp()
		if FileSystem.existsFile( pOutputDir.getPath() )
			deleteDirectory( pOutputDir.getPath() )
		end
	end
	
	// Clean up
	private func void cleanUp()
		giveUp()
		pListener.updateProgressBar( 1, 0 )
		pListener = null
		pState = State.done
		if pTerrainLoader != null
			pTerrainLoader.dispose()
			pTerrainLoader = null
		end
		if pTerrain != null
			pTerrain.dispose()
			pTerrain = null
		end
		if pGroffLoader != null
			pGroffLoader.cancel()
			pGroffLoader = null
		end
		if pPidFileLoader != null
			pPidFileLoader.cancel()
			pPidFileLoader = null
		end
	end
end
