/* 
 * Trespasser Goes Drag[en]gine
 *
 * Copyright (C) 2020, Roland PlÃ¼ss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace TresGoesDE.Converting


pin Dragengine.Gui
pin Dragengine.Utils


/**
 * Swp file.
 */
class SwpFile
	private var String pFilename
	private var int pLength
	private var MemoryFile pData
	private var FileWriter pDataWriter
	private var FileReader pDataReader
	private var FileReader pReader
	private var int pBlockSize
	
	
	public func new( String filename )
		pFilename = filename
		pData = MemoryFile.new( filename )
		pDataWriter = pData.getWriter( true )
		pReader = FileReader.new( filename )
		pBlockSize = 1024 * 64
	end
	
	public func new( String filename, MemoryFile data )
		pFilename = filename
		pData = data
		pDataReader = data.getReader()
	end
	
	
	public func String getFilename()
		return pFilename
	end
	
	public func int getLength()
		return pLength
	end
	
	
	public func bool read()
		if pDataReader != null
			return false
		end
		
		var int size = DEMath.min( pReader.getLength() - pData.getSize(), pBlockSize )
		if size == 0
			pDataWriter = null
			pReader = null
			pDataReader = pData.getReader()
			return false
		end
		
		pDataWriter.writeData( pReader, size )
		return true
	end
	
	public func int readTargetSize()
		return pReader.getLength()
	end
	
	public func int readCurrentSize()
		return pData.getSize()
	end
	
	public func SwpFileImages loadImage( PidFileEntry pid )
		var PidFilePalette palette = pid.getPalette()
		if palette == null and pid.getBitCount() != PidFileEntry.BitDepth.rgb16
			throw EInvalidParam.new( "no-palette without PidFileEntry.BitDepth.rgb16 is not possible" )
		end
		
		var int height = pid.getHeight()
		var int width = pid.getWidth()
		var int pixelCount = width * height
		var bool hasTransp = pid.getTransparency() != PidFileEntry.Transparency.none
		
		// retrieve the pixel data from the data block in the swp
		var EditableImage imageColor, imageOpacity, imageBumpMap
		var int strideSkip, x, y, value
		var Color color
		
		pDataReader.setPosition( pid.getOffsetSWP() )
		
		select pid.getBitCount()
		case PidFileEntry.BitDepth.indexed
			strideSkip = pid.getStride() - width
			
		case PidFileEntry.BitDepth.rgb16
			strideSkip = pid.getStride() - width * 2
		end
		
		select pid.getType()
		case PidFileEntry.Type.indexed
			select pid.getBitCount()
			case PidFileEntry.BitDepth.indexed
				imageColor = EditableImage.new( width, height, 1, 3, 8 )
				if hasTransp
					imageOpacity = EditableImage.new( width, height, 1, 1, 8 )
				end
				for y = height - 1 downto 0
					for x = 0 to width
						value = pDataReader.readByte()
						color = palette.getColorAt( value )
						imageColor.setAt( x, y, palette.getColorAt( value ) )
						if hasTransp
							imageOpacity.setAt( x, y, value == 0 if Color.black else Color.white )
						end
					end
					pDataReader.movePosition( strideSkip )
				end
				
			case PidFileEntry.BitDepth.rgb16
				imageColor = EditableImage.new( width, height, 1, 3, 8 )
				for y = height - 1 downto 0
					for x = 0 to width
						color = readColor8()
						imageColor.setAt( x, y, color )
					end
					pDataReader.movePosition( strideSkip )
				end
			end
			
		case PidFileEntry.Type.curvedBumpMap
			select pid.getBitCount()
			case PidFileEntry.BitDepth.indexed
				throw EInvalidParam.new( "invalid combination of PidFileEntry.Type.curvedBumpMap and PidFileEntry.BitDepth.indexed" )
				
			case PidFileEntry.BitDepth.rgb16
				strideSkip = pid.getStride() - width * 2
				imageColor = EditableImage.new( width, height, 1, 3, 8 )
				imageBumpMap = EditableImage.new( width, height, 1, 3, 8 )
				if hasTransp
					imageOpacity = EditableImage.new( width, height, 1, 1, 8 )
				end
				
				var int vertangle, horzangle
				for y = height - 1 downto 0
					for x = 0 to width
						value = pDataReader.readUShort()
						vertangle = value & 0h0f
						horzangle = ( value >> 4 ) & 0h3f
						value = ( value >> 10 ) & 0h3f
						imageColor.setAt( x, y, palette.getColorAt( value ) )
						imageBumpMap.setAt( x, y, Color.new( 0.5, 0.5, 1 ) )
						if hasTransp
							imageOpacity.setAt( x, y, value == 0 if Color.black else Color.white )
						end
					end
					pDataReader.movePosition( strideSkip )
				end
			end
			
		case PidFileEntry.Type.indexedBumpMap
			select pid.getBitCount()
			case PidFileEntry.BitDepth.indexed
				throw EInvalidParam.new( "invalid combination of PidFileEntry.Type.indexedBumpMap and PidFileEntry.BitDepth.indexed" )
				
			case PidFileEntry.BitDepth.rgb16
				strideSkip = pid.getStride() - width * 2
				imageColor = EditableImage.new( width, height, 1, 3, 8 )
				imageBumpMap = EditableImage.new( width, height, 1, 3, 8 )
				if hasTransp
					imageOpacity = EditableImage.new( width, height, 1, 1, 8 )
				end
				
				var int vertangle, horzangle
				for y = height - 1 downto 0
					for x = 0 to width
						value = pDataReader.readUShort()
						vertangle = value & 0h0f
						horzangle = ( value >> 4 ) & 0h3f
						value = ( value >> 10 ) & 0h3f
						imageColor.setAt( x, y, palette.getColorAt( value ) )
						imageBumpMap.setAt( x, y, Color.new( 0.5, 0.5, 1 ) )
						if hasTransp
							imageOpacity.setAt( x, y, value == 0 if Color.black else Color.white )
						end
					end
					pDataReader.movePosition( strideSkip )
				end
			end
		end
		
		if imageColor != null
			imageColor.contentChanged()
		end
		if imageOpacity != null
			imageOpacity.contentChanged()
		end
		if imageBumpMap != null
			imageBumpMap.contentChanged()
		end
		
		return SwpFileImages.new( imageColor, imageOpacity, imageBumpMap )
	end
	
	
	// Read RGBA color in 8-bit integer format.
	private func Color readColor8()
		var float b = ( pDataReader.readByte() cast float ) / 255
		var float g = ( pDataReader.readByte() cast float ) / 255
		var float r = ( pDataReader.readByte() cast float ) / 255
		var float a = ( pDataReader.readByte() cast float ) / 255
		return Color.new( r, g, b, a )
	end
end
