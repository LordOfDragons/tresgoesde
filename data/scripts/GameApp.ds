/* 
 * Trespasser Goes Drag[en]gine
 *
 * Copyright (C) 2020, Roland Pl√ºss (roland@rptd.ch)
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either 
 * version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace TresGoesDE

pin TresGoesDE.Converting
pin TresGoesDE.Elements

pin Dragengine.Gui.Layouts
pin Dragengine.Gui.Events
pin Dragengine.Scenery
pin Dragengine.Utils


/**
 * Game Application Class.
 */
class GameApp extends BaseGameApp
	private var Converter pConverter
	private var WindowMain pWindowMain
	
	
	public func new()
		pathDesktopGuiTheme = "/content/ui/main.guitheme.xml"
		pathLanguagePacks = "/content/langpacks"
		defaultLanguagePackName = UnicodeString.newFromUTF8( "English" )
	end
	
	
	// The one and only game app instance
	static public func GameApp getGameApp()
		return getApp() cast GameApp
	end
	
	// Converter from trespasser to dragengine
	public func Converter getConverter()
		return pConverter
	end
	
	// Main window
	public func WindowMain getWindowMain()
		return pWindowMain
	end
	
	
	public func void initGame()
		super.initGame()
		
		pConverter = Converter.new()
		
		WindowLogo.showDragengineLogo( this.getDesktop(), BlockActionListener.new( \
			block ActionEvent event
				launchApplication()
			end ) )
	end
	
	public func void launchApplication()
		getWindowGameWorld().addWidget( ShoutConsole.new( getConsole() ) )
		getWindowGameWorld().setVisible( false )
		
		pWindowMain = WindowMain.new()
		pWindowMain.updateListScenes()
	end
	
	protected func void createAndAddElementClasses()
		super.createAndAddElementClasses()
		
		var ElementClassList eclist = getElementClassList()
		eclist.add( CInstanceClass.new() )
		eclist.add( CPlayerClass.new() )
		eclist.add( CAnimalClass.new() )
		eclist.add( CGunClass.new() )
		eclist.add( CEntityAttachedClass.new() )
		eclist.add( CEntityWaterClass.new() )
		eclist.add( CTerrainPlacementClass.new() )
		eclist.add( CMagnetClass.new() )
		eclist.add( CMuzzleFlashClass.new() )
		eclist.add( CTerrainObjClass.new() )
		eclist.add( COcclusionClass.new() )
		eclist.add( CLocationTriggerClass.new() )
		eclist.add( CStartTriggerClass.new() )
		eclist.add( CTeleportClass.new() )
		eclist.add( CParticlesClass.new() )
		eclist.add( CCollisionTriggerClass.new() )
		eclist.add( CAICommandClass.new() )
		eclist.add( CPlayerSettingsClass.new() )
		eclist.add( CSkyClass.new() )
		
		getLoaders().getElementClass().addXmlElementClasses( eclist, "/content/models", true )
	end
	
	public func void cleanUp()
		// close main window
		if pWindowMain != null
			pWindowMain.close()
			pWindowMain = null
		end
		
		super.cleanUp()
	end
end
